{"version":3,"sources":["logo.svg","components/AgentConsole.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","initConf","ccpUrl","softphone","allowFramedSoftphone","disabledRingtone","AgentConsole","props","ccpContainerRef","useRef","window","document","getElementById","useEffect","console","log","connect","core","initCCP","current","error","react_default","a","createElement","className","data-testid","id","ref","App","StrictMode","src","logo","alt","AgentConsole_AgentConsole","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_components_App","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qOCOlCC,eAAW,CACfC,OAAQ,qDACRC,UAAW,CACTC,sBAAsB,EACtBC,kBAAkB,KAITC,EAA6C,SAAAC,GACxD,IAAMC,EAAkBC,iBAAOC,OAAOC,SAASC,eAAe,iBAa9D,OAXAC,oBAAU,WACR,IACML,IACFM,QAAQC,IAAI,CAAEP,oBACbE,OAAeM,QAAQC,KAAKC,QAAQV,EAAgBW,QAASlB,IAEhE,MAAOmB,GACPN,QAAQM,MAAM,CAAEA,QAAOZ,kBAAiBQ,QAAUN,OAAeM,YAElE,IAGDK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,cAAY,gBACxCJ,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAA,WAASG,GAAG,eAAeC,IAAKnB,IAChCa,EAAAC,EAAAC,cAAA,WAASG,GAAG,gBACVL,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,qDAEFF,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,gBCnBHE,EAfO,WACpB,OACEP,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,WAAP,KACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzCX,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACU,EAAD,WCANC,EAAcC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BtC,QAAQC,IACN,iHAKE0B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBhC,QAAQC,IAAI,sCAGR0B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,UAO5BS,MAAM,SAAAnC,GACLN,QAAQM,MAAM,4CAA6CA,KC5FjEoC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAS/C,SAASC,eAAe,SDkB1C,SAAkB6B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAKC,IAA+DlD,OAAO0B,SAASyB,MAC5FC,SAAWpD,OAAO0B,SAAS0B,OAIvC,OAGFpD,OAAOqD,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMJ,IAAN,sBAEP1B,GAgEV,SAAiCM,EAAeC,GAE9CwB,MAAMzB,GACHK,KAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBACjB,MAApBH,EAASI,QAAkC,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAEzE7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BnC,OAAO0B,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLzC,QAAQC,IAAI,mEAjFV4D,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjC/B,QAAQC,IACN,gHAMJwB,EAAgBC,EAAOC,MCzC/BE","file":"static/js/main.2114b539.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useRef, useEffect } from 'react'\r\nimport './AgentConsole.css';\r\n\r\ninterface IAgentConsoleProps {\r\n\r\n}\r\n\r\nconst initConf = {\r\n  ccpUrl: 'https://twilight-sparkle.awsapps.com/connect/ccp#/',\r\n  softphone: {\r\n    allowFramedSoftphone: true,\r\n    disabledRingtone: false,\r\n  },\r\n};\r\n\r\nexport const AgentConsole: React.FC<IAgentConsoleProps> = props => {\r\n  const ccpContainerRef = useRef(window.document.getElementById('ccpContainer') as HTMLElement);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (ccpContainerRef) {\r\n        console.log({ ccpContainerRef });\r\n        (window as any).connect.core.initCCP(ccpContainerRef.current, initConf);\r\n      }\r\n    } catch (error) {\r\n      console.error({ error, ccpContainerRef, connect: (window as any).connect });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className='agentConsole' data-testid='agentConsole'>\r\n      <h1>welcome to amazon connect agent console</h1>\r\n      <section id='ccpContainer' ref={ccpContainerRef}></section>\r\n      <section id='section-main'>\r\n        <header>\r\n          <h1>amazon connect CCP integration details</h1>\r\n        </header>\r\n        <fieldset>\r\n          <legend>contact details</legend>\r\n          <div id='details'></div>\r\n        </fieldset>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport { AgentConsole } from './AgentConsole';\n\nconst App: React.FC = () => {\n  return (\n    <React.StrictMode>\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <section>\n            <AgentConsole ></AgentConsole>\n          </section>\n        </header>\n      </div>\n    </React.StrictMode >\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}